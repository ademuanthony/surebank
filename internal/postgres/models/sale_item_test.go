// Code generated by SQLBoiler 3.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSaleItems(t *testing.T) {
	t.Parallel()

	query := SaleItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSaleItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SaleItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSaleItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := SaleItems().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SaleItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSaleItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SaleItemSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := SaleItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSaleItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SaleItemExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if SaleItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SaleItemExists to return true, but got false.")
	}
}

func testSaleItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	saleItemFound, err := FindSaleItem(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if saleItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSaleItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = SaleItems().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSaleItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := SaleItems().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSaleItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	saleItemOne := &SaleItem{}
	saleItemTwo := &SaleItem{}
	if err = randomize.Struct(seed, saleItemOne, saleItemDBTypes, false, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}
	if err = randomize.Struct(seed, saleItemTwo, saleItemDBTypes, false, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = saleItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = saleItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SaleItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSaleItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	saleItemOne := &SaleItem{}
	saleItemTwo := &SaleItem{}
	if err = randomize.Struct(seed, saleItemOne, saleItemDBTypes, false, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}
	if err = randomize.Struct(seed, saleItemTwo, saleItemDBTypes, false, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = saleItemOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = saleItemTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testSaleItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSaleItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(saleItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := SaleItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSaleItemToOneProductUsingProduct(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SaleItem
	var foreign Product

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, saleItemDBTypes, false, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, productDBTypes, false, productColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Product struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ProductID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Product().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SaleItemSlice{&local}
	if err = local.L.LoadProduct(ctx, tx, false, (*[]*SaleItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Product = nil
	if err = local.L.LoadProduct(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Product == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSaleItemToOneSaleUsingSale(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local SaleItem
	var foreign Sale

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, saleItemDBTypes, false, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, saleDBTypes, false, saleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sale struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.SaleID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Sale().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SaleItemSlice{&local}
	if err = local.L.LoadSale(ctx, tx, false, (*[]*SaleItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sale == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Sale = nil
	if err = local.L.LoadSale(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Sale == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSaleItemToOneSetOpProductUsingProduct(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SaleItem
	var b, c Product

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleItemDBTypes, false, strmangle.SetComplement(saleItemPrimaryKeyColumns, saleItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, productDBTypes, false, strmangle.SetComplement(productPrimaryKeyColumns, productColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Product{&b, &c} {
		err = a.SetProduct(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Product != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SaleItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ProductID))
		reflect.Indirect(reflect.ValueOf(&a.ProductID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ProductID != x.ID {
			t.Error("foreign key was wrong value", a.ProductID, x.ID)
		}
	}
}
func testSaleItemToOneSetOpSaleUsingSale(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a SaleItem
	var b, c Sale

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, saleItemDBTypes, false, strmangle.SetComplement(saleItemPrimaryKeyColumns, saleItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, saleDBTypes, false, strmangle.SetComplement(salePrimaryKeyColumns, saleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Sale{&b, &c} {
		err = a.SetSale(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Sale != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.SaleItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.SaleID != x.ID {
			t.Error("foreign key was wrong value", a.SaleID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.SaleID))
		reflect.Indirect(reflect.ValueOf(&a.SaleID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.SaleID != x.ID {
			t.Error("foreign key was wrong value", a.SaleID, x.ID)
		}
	}
}

func testSaleItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSaleItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SaleItemSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSaleItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := SaleItems().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	saleItemDBTypes = map[string]string{`ID`: `character`, `SaleID`: `character`, `ProductID`: `character`, `Quantity`: `integer`, `UnitPrice`: `double precision`, `UnitCostPrice`: `double precision`, `StockIds`: `character varying`}
	_               = bytes.MinRead
)

func testSaleItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(saleItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(saleItemAllColumns) == len(saleItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSaleItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(saleItemAllColumns) == len(saleItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &SaleItem{}
	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := SaleItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, saleItemDBTypes, true, saleItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(saleItemAllColumns, saleItemPrimaryKeyColumns) {
		fields = saleItemAllColumns
	} else {
		fields = strmangle.SetComplement(
			saleItemAllColumns,
			saleItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SaleItemSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSaleItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(saleItemAllColumns) == len(saleItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := SaleItem{}
	if err = randomize.Struct(seed, &o, saleItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SaleItem: %s", err)
	}

	count, err := SaleItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, saleItemDBTypes, false, saleItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize SaleItem struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert SaleItem: %s", err)
	}

	count, err = SaleItems().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
