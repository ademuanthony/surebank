// Code generated by SQLBoiler 4.1.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DailySummary is an object representing the database table.
type DailySummary struct {
	Income      float64 `boil:"income" json:"income" toml:"income" yaml:"income"`
	Expenditure float64 `boil:"expenditure" json:"expenditure" toml:"expenditure" yaml:"expenditure"`
	BankDeposit float64 `boil:"bank_deposit" json:"bank_deposit" toml:"bank_deposit" yaml:"bank_deposit"`
	Date        int64   `boil:"date" json:"date" toml:"date" yaml:"date"`

	R *dailySummaryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dailySummaryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DailySummaryColumns = struct {
	Income      string
	Expenditure string
	BankDeposit string
	Date        string
}{
	Income:      "income",
	Expenditure: "expenditure",
	BankDeposit: "bank_deposit",
	Date:        "date",
}

// Generated where

var DailySummaryWhere = struct {
	Income      whereHelperfloat64
	Expenditure whereHelperfloat64
	BankDeposit whereHelperfloat64
	Date        whereHelperint64
}{
	Income:      whereHelperfloat64{field: "\"daily_summary\".\"income\""},
	Expenditure: whereHelperfloat64{field: "\"daily_summary\".\"expenditure\""},
	BankDeposit: whereHelperfloat64{field: "\"daily_summary\".\"bank_deposit\""},
	Date:        whereHelperint64{field: "\"daily_summary\".\"date\""},
}

// DailySummaryRels is where relationship names are stored.
var DailySummaryRels = struct {
}{}

// dailySummaryR is where relationships are stored.
type dailySummaryR struct {
}

// NewStruct creates a new relationship struct
func (*dailySummaryR) NewStruct() *dailySummaryR {
	return &dailySummaryR{}
}

// dailySummaryL is where Load methods for each relationship are stored.
type dailySummaryL struct{}

var (
	dailySummaryAllColumns            = []string{"income", "expenditure", "bank_deposit", "date"}
	dailySummaryColumnsWithoutDefault = []string{"income", "expenditure", "bank_deposit", "date"}
	dailySummaryColumnsWithDefault    = []string{}
	dailySummaryPrimaryKeyColumns     = []string{"date"}
)

type (
	// DailySummarySlice is an alias for a slice of pointers to DailySummary.
	// This should generally be used opposed to []DailySummary.
	DailySummarySlice []*DailySummary

	dailySummaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dailySummaryType                 = reflect.TypeOf(&DailySummary{})
	dailySummaryMapping              = queries.MakeStructMapping(dailySummaryType)
	dailySummaryPrimaryKeyMapping, _ = queries.BindMapping(dailySummaryType, dailySummaryMapping, dailySummaryPrimaryKeyColumns)
	dailySummaryInsertCacheMut       sync.RWMutex
	dailySummaryInsertCache          = make(map[string]insertCache)
	dailySummaryUpdateCacheMut       sync.RWMutex
	dailySummaryUpdateCache          = make(map[string]updateCache)
	dailySummaryUpsertCacheMut       sync.RWMutex
	dailySummaryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dailySummary record from the query.
func (q dailySummaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DailySummary, error) {
	o := &DailySummary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for daily_summary")
	}

	return o, nil
}

// All returns all DailySummary records from the query.
func (q dailySummaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DailySummarySlice, error) {
	var o []*DailySummary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DailySummary slice")
	}

	return o, nil
}

// Count returns the count of all DailySummary records in the query.
func (q dailySummaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count daily_summary rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dailySummaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if daily_summary exists")
	}

	return count > 0, nil
}

// DailySummaries retrieves all the records using an executor.
func DailySummaries(mods ...qm.QueryMod) dailySummaryQuery {
	mods = append(mods, qm.From("\"daily_summary\""))
	return dailySummaryQuery{NewQuery(mods...)}
}

// FindDailySummary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDailySummary(ctx context.Context, exec boil.ContextExecutor, date int64, selectCols ...string) (*DailySummary, error) {
	dailySummaryObj := &DailySummary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"daily_summary\" where \"date\"=$1", sel,
	)

	q := queries.Raw(query, date)

	err := q.Bind(ctx, exec, dailySummaryObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from daily_summary")
	}

	return dailySummaryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DailySummary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no daily_summary provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dailySummaryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dailySummaryInsertCacheMut.RLock()
	cache, cached := dailySummaryInsertCache[key]
	dailySummaryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dailySummaryAllColumns,
			dailySummaryColumnsWithDefault,
			dailySummaryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dailySummaryType, dailySummaryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dailySummaryType, dailySummaryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"daily_summary\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"daily_summary\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into daily_summary")
	}

	if !cached {
		dailySummaryInsertCacheMut.Lock()
		dailySummaryInsertCache[key] = cache
		dailySummaryInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DailySummary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DailySummary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	dailySummaryUpdateCacheMut.RLock()
	cache, cached := dailySummaryUpdateCache[key]
	dailySummaryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dailySummaryAllColumns,
			dailySummaryPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update daily_summary, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"daily_summary\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dailySummaryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dailySummaryType, dailySummaryMapping, append(wl, dailySummaryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update daily_summary row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for daily_summary")
	}

	if !cached {
		dailySummaryUpdateCacheMut.Lock()
		dailySummaryUpdateCache[key] = cache
		dailySummaryUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q dailySummaryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for daily_summary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for daily_summary")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DailySummarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dailySummaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"daily_summary\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dailySummaryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dailySummary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dailySummary")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DailySummary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no daily_summary provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dailySummaryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dailySummaryUpsertCacheMut.RLock()
	cache, cached := dailySummaryUpsertCache[key]
	dailySummaryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dailySummaryAllColumns,
			dailySummaryColumnsWithDefault,
			dailySummaryColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dailySummaryAllColumns,
			dailySummaryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert daily_summary, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dailySummaryPrimaryKeyColumns))
			copy(conflict, dailySummaryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"daily_summary\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dailySummaryType, dailySummaryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dailySummaryType, dailySummaryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert daily_summary")
	}

	if !cached {
		dailySummaryUpsertCacheMut.Lock()
		dailySummaryUpsertCache[key] = cache
		dailySummaryUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DailySummary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DailySummary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DailySummary provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dailySummaryPrimaryKeyMapping)
	sql := "DELETE FROM \"daily_summary\" WHERE \"date\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from daily_summary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for daily_summary")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dailySummaryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dailySummaryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from daily_summary")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for daily_summary")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DailySummarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dailySummaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"daily_summary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dailySummaryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dailySummary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for daily_summary")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DailySummary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDailySummary(ctx, exec, o.Date)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DailySummarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DailySummarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dailySummaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"daily_summary\".* FROM \"daily_summary\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dailySummaryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DailySummarySlice")
	}

	*o = slice

	return nil
}

// DailySummaryExists checks if the DailySummary row exists.
func DailySummaryExists(ctx context.Context, exec boil.ContextExecutor, date int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"daily_summary\" where \"date\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, date)
	}
	row := exec.QueryRowContext(ctx, sql, date)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if daily_summary exists")
	}

	return exists, nil
}
