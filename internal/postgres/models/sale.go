// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Sale is an object representing the database table.
type Sale struct {
	ID            string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	BranchID      string      `boil:"branch_id" json:"branch_id" toml:"branch_id" yaml:"branch_id"`
	ReceiptNumber string      `boil:"receipt_number" json:"receipt_number" toml:"receipt_number" yaml:"receipt_number"`
	Amount        float64     `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	AmountTender  float64     `boil:"amount_tender" json:"amount_tender" toml:"amount_tender" yaml:"amount_tender"`
	Balance       float64     `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	CustomerName  null.String `boil:"customer_name" json:"customer_name,omitempty" toml:"customer_name" yaml:"customer_name,omitempty"`
	PhoneNumber   null.String `boil:"phone_number" json:"phone_number,omitempty" toml:"phone_number" yaml:"phone_number,omitempty"`
	CreatedAt     int64       `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     int64       `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	ArchivedAt    null.Int64  `boil:"archived_at" json:"archived_at,omitempty" toml:"archived_at" yaml:"archived_at,omitempty"`
	CreatedByID   string      `boil:"created_by_id" json:"created_by_id" toml:"created_by_id" yaml:"created_by_id"`
	UpdatedByID   null.String `boil:"updated_by_id" json:"updated_by_id,omitempty" toml:"updated_by_id" yaml:"updated_by_id,omitempty"`
	ArchivedByID  null.String `boil:"archived_by_id" json:"archived_by_id,omitempty" toml:"archived_by_id" yaml:"archived_by_id,omitempty"`

	R *saleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L saleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SaleColumns = struct {
	ID            string
	BranchID      string
	ReceiptNumber string
	Amount        string
	AmountTender  string
	Balance       string
	CustomerName  string
	PhoneNumber   string
	CreatedAt     string
	UpdatedAt     string
	ArchivedAt    string
	CreatedByID   string
	UpdatedByID   string
	ArchivedByID  string
}{
	ID:            "id",
	BranchID:      "branch_id",
	ReceiptNumber: "receipt_number",
	Amount:        "amount",
	AmountTender:  "amount_tender",
	Balance:       "balance",
	CustomerName:  "customer_name",
	PhoneNumber:   "phone_number",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	ArchivedAt:    "archived_at",
	CreatedByID:   "created_by_id",
	UpdatedByID:   "updated_by_id",
	ArchivedByID:  "archived_by_id",
}

// Generated where

var SaleWhere = struct {
	ID            whereHelperstring
	BranchID      whereHelperstring
	ReceiptNumber whereHelperstring
	Amount        whereHelperfloat64
	AmountTender  whereHelperfloat64
	Balance       whereHelperfloat64
	CustomerName  whereHelpernull_String
	PhoneNumber   whereHelpernull_String
	CreatedAt     whereHelperint64
	UpdatedAt     whereHelperint64
	ArchivedAt    whereHelpernull_Int64
	CreatedByID   whereHelperstring
	UpdatedByID   whereHelpernull_String
	ArchivedByID  whereHelpernull_String
}{
	ID:            whereHelperstring{field: "\"sale\".\"id\""},
	BranchID:      whereHelperstring{field: "\"sale\".\"branch_id\""},
	ReceiptNumber: whereHelperstring{field: "\"sale\".\"receipt_number\""},
	Amount:        whereHelperfloat64{field: "\"sale\".\"amount\""},
	AmountTender:  whereHelperfloat64{field: "\"sale\".\"amount_tender\""},
	Balance:       whereHelperfloat64{field: "\"sale\".\"balance\""},
	CustomerName:  whereHelpernull_String{field: "\"sale\".\"customer_name\""},
	PhoneNumber:   whereHelpernull_String{field: "\"sale\".\"phone_number\""},
	CreatedAt:     whereHelperint64{field: "\"sale\".\"created_at\""},
	UpdatedAt:     whereHelperint64{field: "\"sale\".\"updated_at\""},
	ArchivedAt:    whereHelpernull_Int64{field: "\"sale\".\"archived_at\""},
	CreatedByID:   whereHelperstring{field: "\"sale\".\"created_by_id\""},
	UpdatedByID:   whereHelpernull_String{field: "\"sale\".\"updated_by_id\""},
	ArchivedByID:  whereHelpernull_String{field: "\"sale\".\"archived_by_id\""},
}

// SaleRels is where relationship names are stored.
var SaleRels = struct {
	ArchivedBy string
	Branch     string
	CreatedBy  string
	UpdatedBy  string
	Payments   string
	SaleItems  string
}{
	ArchivedBy: "ArchivedBy",
	Branch:     "Branch",
	CreatedBy:  "CreatedBy",
	UpdatedBy:  "UpdatedBy",
	Payments:   "Payments",
	SaleItems:  "SaleItems",
}

// saleR is where relationships are stored.
type saleR struct {
	ArchivedBy *User
	Branch     *Branch
	CreatedBy  *User
	UpdatedBy  *User
	Payments   PaymentSlice
	SaleItems  SaleItemSlice
}

// NewStruct creates a new relationship struct
func (*saleR) NewStruct() *saleR {
	return &saleR{}
}

// saleL is where Load methods for each relationship are stored.
type saleL struct{}

var (
	saleAllColumns            = []string{"id", "branch_id", "receipt_number", "amount", "amount_tender", "balance", "customer_name", "phone_number", "created_at", "updated_at", "archived_at", "created_by_id", "updated_by_id", "archived_by_id"}
	saleColumnsWithoutDefault = []string{"id", "receipt_number", "amount", "amount_tender", "balance", "customer_name", "phone_number", "created_at", "updated_at", "archived_at", "created_by_id", "updated_by_id", "archived_by_id"}
	saleColumnsWithDefault    = []string{"branch_id"}
	salePrimaryKeyColumns     = []string{"id"}
)

type (
	// SaleSlice is an alias for a slice of pointers to Sale.
	// This should generally be used opposed to []Sale.
	SaleSlice []*Sale

	saleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	saleType                 = reflect.TypeOf(&Sale{})
	saleMapping              = queries.MakeStructMapping(saleType)
	salePrimaryKeyMapping, _ = queries.BindMapping(saleType, saleMapping, salePrimaryKeyColumns)
	saleInsertCacheMut       sync.RWMutex
	saleInsertCache          = make(map[string]insertCache)
	saleUpdateCacheMut       sync.RWMutex
	saleUpdateCache          = make(map[string]updateCache)
	saleUpsertCacheMut       sync.RWMutex
	saleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single sale record from the query.
func (q saleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Sale, error) {
	o := &Sale{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for sale")
	}

	return o, nil
}

// All returns all Sale records from the query.
func (q saleQuery) All(ctx context.Context, exec boil.ContextExecutor) (SaleSlice, error) {
	var o []*Sale

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Sale slice")
	}

	return o, nil
}

// Count returns the count of all Sale records in the query.
func (q saleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count sale rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q saleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if sale exists")
	}

	return count > 0, nil
}

// ArchivedBy pointed to by the foreign key.
func (o *Sale) ArchivedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ArchivedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Branch pointed to by the foreign key.
func (o *Sale) Branch(mods ...qm.QueryMod) branchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BranchID),
	}

	queryMods = append(queryMods, mods...)

	query := Branches(queryMods...)
	queries.SetFrom(query.Query, "\"branch\"")

	return query
}

// CreatedBy pointed to by the foreign key.
func (o *Sale) CreatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// UpdatedBy pointed to by the foreign key.
func (o *Sale) UpdatedBy(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UpdatedByID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// Payments retrieves all the payment's Payments with an executor.
func (o *Sale) Payments(mods ...qm.QueryMod) paymentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"payment\".\"sale_id\"=?", o.ID),
	)

	query := Payments(queryMods...)
	queries.SetFrom(query.Query, "\"payment\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"payment\".*"})
	}

	return query
}

// SaleItems retrieves all the sale_item's SaleItems with an executor.
func (o *Sale) SaleItems(mods ...qm.QueryMod) saleItemQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"sale_item\".\"sale_id\"=?", o.ID),
	)

	query := SaleItems(queryMods...)
	queries.SetFrom(query.Query, "\"sale_item\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"sale_item\".*"})
	}

	return query
}

// LoadArchivedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleL) LoadArchivedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		object = maybeSale.(*Sale)
	} else {
		slice = *maybeSale.(*[]*Sale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		if !queries.IsNil(object.ArchivedByID) {
			args = append(args, object.ArchivedByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ArchivedByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ArchivedByID) {
				args = append(args, obj.ArchivedByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ArchivedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ArchivedBySales = append(foreign.R.ArchivedBySales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ArchivedByID, foreign.ID) {
				local.R.ArchivedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ArchivedBySales = append(foreign.R.ArchivedBySales, local)
				break
			}
		}
	}

	return nil
}

// LoadBranch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleL) LoadBranch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		object = maybeSale.(*Sale)
	} else {
		slice = *maybeSale.(*[]*Sale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.BranchID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if a == obj.BranchID {
					continue Outer
				}
			}

			args = append(args, obj.BranchID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`branch`), qm.WhereIn(`branch.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Branch")
	}

	var resultSlice []*Branch
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Branch")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for branch")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for branch")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Branch = foreign
		if foreign.R == nil {
			foreign.R = &branchR{}
		}
		foreign.R.Sales = append(foreign.R.Sales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BranchID == foreign.ID {
				local.R.Branch = foreign
				if foreign.R == nil {
					foreign.R = &branchR{}
				}
				foreign.R.Sales = append(foreign.R.Sales, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleL) LoadCreatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		object = maybeSale.(*Sale)
	} else {
		slice = *maybeSale.(*[]*Sale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.CreatedByID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if a == obj.CreatedByID {
					continue Outer
				}
			}

			args = append(args, obj.CreatedByID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedBySales = append(foreign.R.CreatedBySales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatedByID == foreign.ID {
				local.R.CreatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedBySales = append(foreign.R.CreatedBySales, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedBy allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (saleL) LoadUpdatedBy(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		object = maybeSale.(*Sale)
	} else {
		slice = *maybeSale.(*[]*Sale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		if !queries.IsNil(object.UpdatedByID) {
			args = append(args, object.UpdatedByID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.UpdatedByID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.UpdatedByID) {
				args = append(args, obj.UpdatedByID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedBy = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedBySales = append(foreign.R.UpdatedBySales, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UpdatedByID, foreign.ID) {
				local.R.UpdatedBy = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedBySales = append(foreign.R.UpdatedBySales, local)
				break
			}
		}
	}

	return nil
}

// LoadPayments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (saleL) LoadPayments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		object = maybeSale.(*Sale)
	} else {
		slice = *maybeSale.(*[]*Sale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`payment`), qm.WhereIn(`payment.sale_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load payment")
	}

	var resultSlice []*Payment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice payment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on payment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for payment")
	}

	if singular {
		object.R.Payments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &paymentR{}
			}
			foreign.R.Sale = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SaleID {
				local.R.Payments = append(local.R.Payments, foreign)
				if foreign.R == nil {
					foreign.R = &paymentR{}
				}
				foreign.R.Sale = local
				break
			}
		}
	}

	return nil
}

// LoadSaleItems allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (saleL) LoadSaleItems(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSale interface{}, mods queries.Applicator) error {
	var slice []*Sale
	var object *Sale

	if singular {
		object = maybeSale.(*Sale)
	} else {
		slice = *maybeSale.(*[]*Sale)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &saleR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &saleR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`sale_item`), qm.WhereIn(`sale_item.sale_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load sale_item")
	}

	var resultSlice []*SaleItem
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice sale_item")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on sale_item")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sale_item")
	}

	if singular {
		object.R.SaleItems = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &saleItemR{}
			}
			foreign.R.Sale = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SaleID {
				local.R.SaleItems = append(local.R.SaleItems, foreign)
				if foreign.R == nil {
					foreign.R = &saleItemR{}
				}
				foreign.R.Sale = local
				break
			}
		}
	}

	return nil
}

// SetArchivedBy of the sale to the related item.
// Sets o.R.ArchivedBy to related.
// Adds o to related.R.ArchivedBySales.
func (o *Sale) SetArchivedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"archived_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, salePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ArchivedByID, related.ID)
	if o.R == nil {
		o.R = &saleR{
			ArchivedBy: related,
		}
	} else {
		o.R.ArchivedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			ArchivedBySales: SaleSlice{o},
		}
	} else {
		related.R.ArchivedBySales = append(related.R.ArchivedBySales, o)
	}

	return nil
}

// RemoveArchivedBy relationship.
// Sets o.R.ArchivedBy to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Sale) RemoveArchivedBy(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.ArchivedByID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("archived_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ArchivedBy = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ArchivedBySales {
		if queries.Equal(o.ArchivedByID, ri.ArchivedByID) {
			continue
		}

		ln := len(related.R.ArchivedBySales)
		if ln > 1 && i < ln-1 {
			related.R.ArchivedBySales[i] = related.R.ArchivedBySales[ln-1]
		}
		related.R.ArchivedBySales = related.R.ArchivedBySales[:ln-1]
		break
	}
	return nil
}

// SetBranch of the sale to the related item.
// Sets o.R.Branch to related.
// Adds o to related.R.Sales.
func (o *Sale) SetBranch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Branch) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"branch_id"}),
		strmangle.WhereClause("\"", "\"", 2, salePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BranchID = related.ID
	if o.R == nil {
		o.R = &saleR{
			Branch: related,
		}
	} else {
		o.R.Branch = related
	}

	if related.R == nil {
		related.R = &branchR{
			Sales: SaleSlice{o},
		}
	} else {
		related.R.Sales = append(related.R.Sales, o)
	}

	return nil
}

// SetCreatedBy of the sale to the related item.
// Sets o.R.CreatedBy to related.
// Adds o to related.R.CreatedBySales.
func (o *Sale) SetCreatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"created_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, salePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatedByID = related.ID
	if o.R == nil {
		o.R = &saleR{
			CreatedBy: related,
		}
	} else {
		o.R.CreatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedBySales: SaleSlice{o},
		}
	} else {
		related.R.CreatedBySales = append(related.R.CreatedBySales, o)
	}

	return nil
}

// SetUpdatedBy of the sale to the related item.
// Sets o.R.UpdatedBy to related.
// Adds o to related.R.UpdatedBySales.
func (o *Sale) SetUpdatedBy(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"sale\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"updated_by_id"}),
		strmangle.WhereClause("\"", "\"", 2, salePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UpdatedByID, related.ID)
	if o.R == nil {
		o.R = &saleR{
			UpdatedBy: related,
		}
	} else {
		o.R.UpdatedBy = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedBySales: SaleSlice{o},
		}
	} else {
		related.R.UpdatedBySales = append(related.R.UpdatedBySales, o)
	}

	return nil
}

// RemoveUpdatedBy relationship.
// Sets o.R.UpdatedBy to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Sale) RemoveUpdatedBy(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UpdatedByID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("updated_by_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UpdatedBy = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UpdatedBySales {
		if queries.Equal(o.UpdatedByID, ri.UpdatedByID) {
			continue
		}

		ln := len(related.R.UpdatedBySales)
		if ln > 1 && i < ln-1 {
			related.R.UpdatedBySales[i] = related.R.UpdatedBySales[ln-1]
		}
		related.R.UpdatedBySales = related.R.UpdatedBySales[:ln-1]
		break
	}
	return nil
}

// AddPayments adds the given related objects to the existing relationships
// of the sale, optionally inserting them as new records.
// Appends related to o.R.Payments.
// Sets related.R.Sale appropriately.
func (o *Sale) AddPayments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Payment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SaleID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"payment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sale_id"}),
				strmangle.WhereClause("\"", "\"", 2, paymentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SaleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &saleR{
			Payments: related,
		}
	} else {
		o.R.Payments = append(o.R.Payments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &paymentR{
				Sale: o,
			}
		} else {
			rel.R.Sale = o
		}
	}
	return nil
}

// AddSaleItems adds the given related objects to the existing relationships
// of the sale, optionally inserting them as new records.
// Appends related to o.R.SaleItems.
// Sets related.R.Sale appropriately.
func (o *Sale) AddSaleItems(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SaleItem) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SaleID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"sale_item\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sale_id"}),
				strmangle.WhereClause("\"", "\"", 2, saleItemPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SaleID = o.ID
		}
	}

	if o.R == nil {
		o.R = &saleR{
			SaleItems: related,
		}
	} else {
		o.R.SaleItems = append(o.R.SaleItems, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &saleItemR{
				Sale: o,
			}
		} else {
			rel.R.Sale = o
		}
	}
	return nil
}

// Sales retrieves all the records using an executor.
func Sales(mods ...qm.QueryMod) saleQuery {
	mods = append(mods, qm.From("\"sale\""))
	return saleQuery{NewQuery(mods...)}
}

// FindSale retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSale(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Sale, error) {
	saleObj := &Sale{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"sale\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, saleObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from sale")
	}

	return saleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Sale) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sale provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(saleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	saleInsertCacheMut.RLock()
	cache, cached := saleInsertCache[key]
	saleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			saleAllColumns,
			saleColumnsWithDefault,
			saleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(saleType, saleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(saleType, saleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"sale\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"sale\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into sale")
	}

	if !cached {
		saleInsertCacheMut.Lock()
		saleInsertCache[key] = cache
		saleInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Sale.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Sale) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	saleUpdateCacheMut.RLock()
	cache, cached := saleUpdateCache[key]
	saleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			saleAllColumns,
			salePrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update sale, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"sale\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, salePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(saleType, saleMapping, append(wl, salePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update sale row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for sale")
	}

	if !cached {
		saleUpdateCacheMut.Lock()
		saleUpdateCache[key] = cache
		saleUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q saleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for sale")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for sale")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SaleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"sale\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, salePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sale slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sale")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Sale) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no sale provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(saleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	saleUpsertCacheMut.RLock()
	cache, cached := saleUpsertCache[key]
	saleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			saleAllColumns,
			saleColumnsWithDefault,
			saleColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			saleAllColumns,
			salePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert sale, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(salePrimaryKeyColumns))
			copy(conflict, salePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"sale\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(saleType, saleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(saleType, saleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert sale")
	}

	if !cached {
		saleUpsertCacheMut.Lock()
		saleUpsertCache[key] = cache
		saleUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Sale record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Sale) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Sale provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), salePrimaryKeyMapping)
	sql := "DELETE FROM \"sale\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from sale")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for sale")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q saleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no saleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sale")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sale")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SaleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"sale\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sale slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for sale")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Sale) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSale(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SaleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SaleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"sale\".* FROM \"sale\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, salePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SaleSlice")
	}

	*o = slice

	return nil
}

// SaleExists checks if the Sale row exists.
func SaleExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"sale\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if sale exists")
	}

	return exists, nil
}
