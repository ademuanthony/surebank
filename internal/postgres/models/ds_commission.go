// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DSCommission is an object representing the database table.
type DSCommission struct {
	ID            string  `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID     string  `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	CustomerID    string  `boil:"customer_id" json:"customer_id" toml:"customer_id" yaml:"customer_id"`
	Amount        float64 `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	Date          int64   `boil:"date" json:"date" toml:"date" yaml:"date"`
	EffectiveDate int64   `boil:"effective_date" json:"effective_date" toml:"effective_date" yaml:"effective_date"`

	R *dsCommissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L dsCommissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DSCommissionColumns = struct {
	ID            string
	AccountID     string
	CustomerID    string
	Amount        string
	Date          string
	EffectiveDate string
}{
	ID:            "id",
	AccountID:     "account_id",
	CustomerID:    "customer_id",
	Amount:        "amount",
	Date:          "date",
	EffectiveDate: "effective_date",
}

var DSCommissionTableColumns = struct {
	ID            string
	AccountID     string
	CustomerID    string
	Amount        string
	Date          string
	EffectiveDate string
}{
	ID:            "ds_commission.id",
	AccountID:     "ds_commission.account_id",
	CustomerID:    "ds_commission.customer_id",
	Amount:        "ds_commission.amount",
	Date:          "ds_commission.date",
	EffectiveDate: "ds_commission.effective_date",
}

// Generated where

var DSCommissionWhere = struct {
	ID            whereHelperstring
	AccountID     whereHelperstring
	CustomerID    whereHelperstring
	Amount        whereHelperfloat64
	Date          whereHelperint64
	EffectiveDate whereHelperint64
}{
	ID:            whereHelperstring{field: "\"ds_commission\".\"id\""},
	AccountID:     whereHelperstring{field: "\"ds_commission\".\"account_id\""},
	CustomerID:    whereHelperstring{field: "\"ds_commission\".\"customer_id\""},
	Amount:        whereHelperfloat64{field: "\"ds_commission\".\"amount\""},
	Date:          whereHelperint64{field: "\"ds_commission\".\"date\""},
	EffectiveDate: whereHelperint64{field: "\"ds_commission\".\"effective_date\""},
}

// DSCommissionRels is where relationship names are stored.
var DSCommissionRels = struct {
	Account  string
	Customer string
}{
	Account:  "Account",
	Customer: "Customer",
}

// dsCommissionR is where relationships are stored.
type dsCommissionR struct {
	Account  *Account  `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	Customer *Customer `boil:"Customer" json:"Customer" toml:"Customer" yaml:"Customer"`
}

// NewStruct creates a new relationship struct
func (*dsCommissionR) NewStruct() *dsCommissionR {
	return &dsCommissionR{}
}

// dsCommissionL is where Load methods for each relationship are stored.
type dsCommissionL struct{}

var (
	dsCommissionAllColumns            = []string{"id", "account_id", "customer_id", "amount", "date", "effective_date"}
	dsCommissionColumnsWithoutDefault = []string{"id", "customer_id", "amount", "date"}
	dsCommissionColumnsWithDefault    = []string{"account_id", "effective_date"}
	dsCommissionPrimaryKeyColumns     = []string{"id"}
)

type (
	// DSCommissionSlice is an alias for a slice of pointers to DSCommission.
	// This should almost always be used instead of []DSCommission.
	DSCommissionSlice []*DSCommission

	dsCommissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	dsCommissionType                 = reflect.TypeOf(&DSCommission{})
	dsCommissionMapping              = queries.MakeStructMapping(dsCommissionType)
	dsCommissionPrimaryKeyMapping, _ = queries.BindMapping(dsCommissionType, dsCommissionMapping, dsCommissionPrimaryKeyColumns)
	dsCommissionInsertCacheMut       sync.RWMutex
	dsCommissionInsertCache          = make(map[string]insertCache)
	dsCommissionUpdateCacheMut       sync.RWMutex
	dsCommissionUpdateCache          = make(map[string]updateCache)
	dsCommissionUpsertCacheMut       sync.RWMutex
	dsCommissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single dsCommission record from the query.
func (q dsCommissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DSCommission, error) {
	o := &DSCommission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ds_commission")
	}

	return o, nil
}

// All returns all DSCommission records from the query.
func (q dsCommissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (DSCommissionSlice, error) {
	var o []*DSCommission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DSCommission slice")
	}

	return o, nil
}

// Count returns the count of all DSCommission records in the query.
func (q dsCommissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ds_commission rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q dsCommissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ds_commission exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *DSCommission) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// Customer pointed to by the foreign key.
func (o *DSCommission) Customer(mods ...qm.QueryMod) customerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CustomerID),
	}

	queryMods = append(queryMods, mods...)

	query := Customers(queryMods...)
	queries.SetFrom(query.Query, "\"customer\"")

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dsCommissionL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDSCommission interface{}, mods queries.Applicator) error {
	var slice []*DSCommission
	var object *DSCommission

	if singular {
		object = maybeDSCommission.(*DSCommission)
	} else {
		slice = *maybeDSCommission.(*[]*DSCommission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dsCommissionR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dsCommissionR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.DSCommissions = append(foreign.R.DSCommissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.DSCommissions = append(foreign.R.DSCommissions, local)
				break
			}
		}
	}

	return nil
}

// LoadCustomer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (dsCommissionL) LoadCustomer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDSCommission interface{}, mods queries.Applicator) error {
	var slice []*DSCommission
	var object *DSCommission

	if singular {
		object = maybeDSCommission.(*DSCommission)
	} else {
		slice = *maybeDSCommission.(*[]*DSCommission)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &dsCommissionR{}
		}
		args = append(args, object.CustomerID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &dsCommissionR{}
			}

			for _, a := range args {
				if a == obj.CustomerID {
					continue Outer
				}
			}

			args = append(args, obj.CustomerID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`customer`),
		qm.WhereIn(`customer.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Customer")
	}

	var resultSlice []*Customer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Customer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for customer")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for customer")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Customer = foreign
		if foreign.R == nil {
			foreign.R = &customerR{}
		}
		foreign.R.DSCommissions = append(foreign.R.DSCommissions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CustomerID == foreign.ID {
				local.R.Customer = foreign
				if foreign.R == nil {
					foreign.R = &customerR{}
				}
				foreign.R.DSCommissions = append(foreign.R.DSCommissions, local)
				break
			}
		}
	}

	return nil
}

// SetAccount of the dsCommission to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.DSCommissions.
func (o *DSCommission) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ds_commission\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, dsCommissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &dsCommissionR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			DSCommissions: DSCommissionSlice{o},
		}
	} else {
		related.R.DSCommissions = append(related.R.DSCommissions, o)
	}

	return nil
}

// SetCustomer of the dsCommission to the related item.
// Sets o.R.Customer to related.
// Adds o to related.R.DSCommissions.
func (o *DSCommission) SetCustomer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Customer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ds_commission\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"customer_id"}),
		strmangle.WhereClause("\"", "\"", 2, dsCommissionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CustomerID = related.ID
	if o.R == nil {
		o.R = &dsCommissionR{
			Customer: related,
		}
	} else {
		o.R.Customer = related
	}

	if related.R == nil {
		related.R = &customerR{
			DSCommissions: DSCommissionSlice{o},
		}
	} else {
		related.R.DSCommissions = append(related.R.DSCommissions, o)
	}

	return nil
}

// DSCommissions retrieves all the records using an executor.
func DSCommissions(mods ...qm.QueryMod) dsCommissionQuery {
	mods = append(mods, qm.From("\"ds_commission\""))
	return dsCommissionQuery{NewQuery(mods...)}
}

// FindDSCommission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDSCommission(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DSCommission, error) {
	dsCommissionObj := &DSCommission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ds_commission\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, dsCommissionObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ds_commission")
	}

	return dsCommissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DSCommission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ds_commission provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(dsCommissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	dsCommissionInsertCacheMut.RLock()
	cache, cached := dsCommissionInsertCache[key]
	dsCommissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			dsCommissionAllColumns,
			dsCommissionColumnsWithDefault,
			dsCommissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(dsCommissionType, dsCommissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(dsCommissionType, dsCommissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ds_commission\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ds_commission\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ds_commission")
	}

	if !cached {
		dsCommissionInsertCacheMut.Lock()
		dsCommissionInsertCache[key] = cache
		dsCommissionInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the DSCommission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DSCommission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	dsCommissionUpdateCacheMut.RLock()
	cache, cached := dsCommissionUpdateCache[key]
	dsCommissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			dsCommissionAllColumns,
			dsCommissionPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ds_commission, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ds_commission\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, dsCommissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(dsCommissionType, dsCommissionMapping, append(wl, dsCommissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ds_commission row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ds_commission")
	}

	if !cached {
		dsCommissionUpdateCacheMut.Lock()
		dsCommissionUpdateCache[key] = cache
		dsCommissionUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q dsCommissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ds_commission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ds_commission")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DSCommissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dsCommissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ds_commission\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, dsCommissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in dsCommission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all dsCommission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DSCommission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ds_commission provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(dsCommissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	dsCommissionUpsertCacheMut.RLock()
	cache, cached := dsCommissionUpsertCache[key]
	dsCommissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			dsCommissionAllColumns,
			dsCommissionColumnsWithDefault,
			dsCommissionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			dsCommissionAllColumns,
			dsCommissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ds_commission, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(dsCommissionPrimaryKeyColumns))
			copy(conflict, dsCommissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"ds_commission\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(dsCommissionType, dsCommissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(dsCommissionType, dsCommissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ds_commission")
	}

	if !cached {
		dsCommissionUpsertCacheMut.Lock()
		dsCommissionUpsertCache[key] = cache
		dsCommissionUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single DSCommission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DSCommission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DSCommission provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), dsCommissionPrimaryKeyMapping)
	sql := "DELETE FROM \"ds_commission\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ds_commission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ds_commission")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q dsCommissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no dsCommissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ds_commission")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ds_commission")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DSCommissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dsCommissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ds_commission\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dsCommissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from dsCommission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ds_commission")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DSCommission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDSCommission(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DSCommissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DSCommissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), dsCommissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ds_commission\".* FROM \"ds_commission\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, dsCommissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DSCommissionSlice")
	}

	*o = slice

	return nil
}

// DSCommissionExists checks if the DSCommission row exists.
func DSCommissionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ds_commission\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ds_commission exists")
	}

	return exists, nil
}
