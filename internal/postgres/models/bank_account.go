// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BankAccount is an object representing the database table.
type BankAccount struct {
	ID            string `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountName   string `boil:"account_name" json:"account_name" toml:"account_name" yaml:"account_name"`
	AccountNumber string `boil:"account_number" json:"account_number" toml:"account_number" yaml:"account_number"`
	Bank          string `boil:"bank" json:"bank" toml:"bank" yaml:"bank"`

	R *bankAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bankAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BankAccountColumns = struct {
	ID            string
	AccountName   string
	AccountNumber string
	Bank          string
}{
	ID:            "id",
	AccountName:   "account_name",
	AccountNumber: "account_number",
	Bank:          "bank",
}

var BankAccountTableColumns = struct {
	ID            string
	AccountName   string
	AccountNumber string
	Bank          string
}{
	ID:            "bank_account.id",
	AccountName:   "bank_account.account_name",
	AccountNumber: "bank_account.account_number",
	Bank:          "bank_account.bank",
}

// Generated where

var BankAccountWhere = struct {
	ID            whereHelperstring
	AccountName   whereHelperstring
	AccountNumber whereHelperstring
	Bank          whereHelperstring
}{
	ID:            whereHelperstring{field: "\"bank_account\".\"id\""},
	AccountName:   whereHelperstring{field: "\"bank_account\".\"account_name\""},
	AccountNumber: whereHelperstring{field: "\"bank_account\".\"account_number\""},
	Bank:          whereHelperstring{field: "\"bank_account\".\"bank\""},
}

// BankAccountRels is where relationship names are stored.
var BankAccountRels = struct {
	BankDeposits string
}{
	BankDeposits: "BankDeposits",
}

// bankAccountR is where relationships are stored.
type bankAccountR struct {
	BankDeposits BankDepositSlice `boil:"BankDeposits" json:"BankDeposits" toml:"BankDeposits" yaml:"BankDeposits"`
}

// NewStruct creates a new relationship struct
func (*bankAccountR) NewStruct() *bankAccountR {
	return &bankAccountR{}
}

// bankAccountL is where Load methods for each relationship are stored.
type bankAccountL struct{}

var (
	bankAccountAllColumns            = []string{"id", "account_name", "account_number", "bank"}
	bankAccountColumnsWithoutDefault = []string{"id", "account_name", "account_number", "bank"}
	bankAccountColumnsWithDefault    = []string{}
	bankAccountPrimaryKeyColumns     = []string{"id"}
)

type (
	// BankAccountSlice is an alias for a slice of pointers to BankAccount.
	// This should almost always be used instead of []BankAccount.
	BankAccountSlice []*BankAccount

	bankAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bankAccountType                 = reflect.TypeOf(&BankAccount{})
	bankAccountMapping              = queries.MakeStructMapping(bankAccountType)
	bankAccountPrimaryKeyMapping, _ = queries.BindMapping(bankAccountType, bankAccountMapping, bankAccountPrimaryKeyColumns)
	bankAccountInsertCacheMut       sync.RWMutex
	bankAccountInsertCache          = make(map[string]insertCache)
	bankAccountUpdateCacheMut       sync.RWMutex
	bankAccountUpdateCache          = make(map[string]updateCache)
	bankAccountUpsertCacheMut       sync.RWMutex
	bankAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single bankAccount record from the query.
func (q bankAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BankAccount, error) {
	o := &BankAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bank_account")
	}

	return o, nil
}

// All returns all BankAccount records from the query.
func (q bankAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (BankAccountSlice, error) {
	var o []*BankAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BankAccount slice")
	}

	return o, nil
}

// Count returns the count of all BankAccount records in the query.
func (q bankAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bank_account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bankAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bank_account exists")
	}

	return count > 0, nil
}

// BankDeposits retrieves all the bank_deposit's BankDeposits with an executor.
func (o *BankAccount) BankDeposits(mods ...qm.QueryMod) bankDepositQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"bank_deposit\".\"bank_account_id\"=?", o.ID),
	)

	query := BankDeposits(queryMods...)
	queries.SetFrom(query.Query, "\"bank_deposit\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"bank_deposit\".*"})
	}

	return query
}

// LoadBankDeposits allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (bankAccountL) LoadBankDeposits(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBankAccount interface{}, mods queries.Applicator) error {
	var slice []*BankAccount
	var object *BankAccount

	if singular {
		object = maybeBankAccount.(*BankAccount)
	} else {
		slice = *maybeBankAccount.(*[]*BankAccount)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &bankAccountR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &bankAccountR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`bank_deposit`),
		qm.WhereIn(`bank_deposit.bank_account_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load bank_deposit")
	}

	var resultSlice []*BankDeposit
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice bank_deposit")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on bank_deposit")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for bank_deposit")
	}

	if singular {
		object.R.BankDeposits = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &bankDepositR{}
			}
			foreign.R.BankAccount = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BankAccountID {
				local.R.BankDeposits = append(local.R.BankDeposits, foreign)
				if foreign.R == nil {
					foreign.R = &bankDepositR{}
				}
				foreign.R.BankAccount = local
				break
			}
		}
	}

	return nil
}

// AddBankDeposits adds the given related objects to the existing relationships
// of the bank_account, optionally inserting them as new records.
// Appends related to o.R.BankDeposits.
// Sets related.R.BankAccount appropriately.
func (o *BankAccount) AddBankDeposits(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BankDeposit) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BankAccountID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"bank_deposit\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bank_account_id"}),
				strmangle.WhereClause("\"", "\"", 2, bankDepositPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BankAccountID = o.ID
		}
	}

	if o.R == nil {
		o.R = &bankAccountR{
			BankDeposits: related,
		}
	} else {
		o.R.BankDeposits = append(o.R.BankDeposits, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &bankDepositR{
				BankAccount: o,
			}
		} else {
			rel.R.BankAccount = o
		}
	}
	return nil
}

// BankAccounts retrieves all the records using an executor.
func BankAccounts(mods ...qm.QueryMod) bankAccountQuery {
	mods = append(mods, qm.From("\"bank_account\""))
	return bankAccountQuery{NewQuery(mods...)}
}

// FindBankAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBankAccount(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*BankAccount, error) {
	bankAccountObj := &BankAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bank_account\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, bankAccountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bank_account")
	}

	return bankAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BankAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bank_account provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(bankAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bankAccountInsertCacheMut.RLock()
	cache, cached := bankAccountInsertCache[key]
	bankAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bankAccountAllColumns,
			bankAccountColumnsWithDefault,
			bankAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bank_account\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bank_account\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bank_account")
	}

	if !cached {
		bankAccountInsertCacheMut.Lock()
		bankAccountInsertCache[key] = cache
		bankAccountInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the BankAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BankAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	bankAccountUpdateCacheMut.RLock()
	cache, cached := bankAccountUpdateCache[key]
	bankAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bankAccountAllColumns,
			bankAccountPrimaryKeyColumns,
		)

		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bank_account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bank_account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, bankAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, append(wl, bankAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bank_account row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bank_account")
	}

	if !cached {
		bankAccountUpdateCacheMut.Lock()
		bankAccountUpdateCache[key] = cache
		bankAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q bankAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bank_account")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BankAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bank_account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, bankAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bankAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BankAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bank_account provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(bankAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bankAccountUpsertCacheMut.RLock()
	cache, cached := bankAccountUpsertCache[key]
	bankAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			bankAccountAllColumns,
			bankAccountColumnsWithDefault,
			bankAccountColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bankAccountAllColumns,
			bankAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bank_account, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bankAccountPrimaryKeyColumns))
			copy(conflict, bankAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"bank_account\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bankAccountType, bankAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bank_account")
	}

	if !cached {
		bankAccountUpsertCacheMut.Lock()
		bankAccountUpsertCache[key] = cache
		bankAccountUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single BankAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BankAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BankAccount provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bankAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"bank_account\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bank_account")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bankAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bankAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bank_account")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bank_account")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BankAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bank_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bankAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bankAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bank_account")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BankAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBankAccount(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BankAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BankAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bankAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bank_account\".* FROM \"bank_account\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, bankAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BankAccountSlice")
	}

	*o = slice

	return nil
}

// BankAccountExists checks if the BankAccount row exists.
func BankAccountExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bank_account\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bank_account exists")
	}

	return exists, nil
}
